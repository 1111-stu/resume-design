events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # 增加 client_max_body_size 指令，设置请求体的最大大小为50M
    client_max_body_size 50M;

    # Gzip 压缩优化
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_min_length 1000;

    # 重定向 www.91huajian.cn 到 maobucv.com
    server {
        listen 80;
        server_name www.91huajian.cn;
        return 301 https://maobucv.com$request_uri;
    }

    server {
        listen 443 ssl;
        server_name www.91huajian.cn;

        ssl_certificate /etc/nginx/ssl/fullchain.crt;
        ssl_certificate_key /etc/nginx/ssl/private.pem;

        return 301 https://maobucv.com$request_uri;
    }

    server {
        listen 80;
        server_name www.maobucv.com;
        return 301 https://maobucv.com$request_uri;
    }

    # 重定向 maobucv.com 的 HTTP 到 HTTPS
    server {
        listen 80;
        server_name maobucv.com;

        return 301 https://maobucv.com$request_uri;
    }

    # 处理 maobucv.com 的 HTTPS 请求
    server {
        listen 443 ssl http2;
        server_name maobucv.com;

        ssl_certificate /etc/nginx/ssl/maobucv.crt;
        ssl_certificate_key /etc/nginx/ssl/maobucv.pem;

        # 静态文件处理
        location / {
            root /usr/share/nginx/html;
            index index.html index.htm;
            try_files $uri $uri/ /index.html;
        }

        # 转发 /huajian 接口到指定地址
        location /huajian {
            proxy_pass http://134.175.233.176:3399;
        }

        # Prerender.io 集成，处理爬虫请求
        location / {
            set $prerender 0;

            # 匹配常见搜索引擎爬虫的 User-Agent
            if ($http_user_agent ~* "(googlebot|bingbot|baiduspider|yandex|duckduckbot|slurp|facebookexternalhit|twitterbot|rogerbot|linkedinbot|embedly|quora|slackbot|vkShare|W3C_Validator)") {
                set $prerender 1;
            }

            # 匹配 _escaped_fragment_ 参数
            if ($args ~ "_escaped_fragment_") {
                set $prerender 1;
            }

            # 如果是爬虫请求，则转发到 Prerender.io 服务
            if ($prerender = 1) {
                rewrite .* / break;
                proxy_pass https://service.prerender.io;
                proxy_set_header X-Prerender-Token your-prerender-token; # 替换为你的 Prerender.io Token
                proxy_set_header Host $host;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                break;
            }

            # 否则正常处理请求
            try_files $uri $uri/ /index.html;
        }

        # 处理 Vue 路由刷新
        location @router {
            rewrite ^.*$ /index.html last;
        }
    }
}
